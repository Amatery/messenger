{"version":3,"sources":["serviceWorker.ts","api/api.ts","redux/chat-reducer.ts","redux/store.ts","Components/Chat/Chat.tsx","Components/LoginPage/LoginPage.tsx","MessengerApp.tsx","index.tsx","Components/LoginPage/LoginPage.module.css","Components/Chat/Chat.module.css"],"names":["Boolean","window","location","hostname","match","api","socket","createConnection","this","io","subscribe","initMessagesHandler","newMessageSentHandler","userTypingHandler","on","destroyConnection","disconnect","sendName","name","emit","error","console","log","alert","sendMessage","message","typeMessage","initialState","messages","typingUsers","action","type","user","dispatch","rootReducer","combineReducers","chat","state","filter","u","id","store","createStore","applyMiddleware","thunk","Chat","props","useSelector","useDispatch","useState","setMessage","isAutoScrollActive","setIsAutoScrollActive","lastScrollTop","setLastScrollTop","useEffect","messagesAnchorRef","current","scrollIntoView","behavior","useRef","messageElements","map","m","key","typingUsersElement","to","className","styles","chatWindow","onScroll","e","element","currentTarget","maxScrollPosition","scrollHeight","clientHeight","scrollTop","Math","abs","ref","messageField","label","value","onKeyPress","target","onChange","messageButton","size","variant","color","onClick","LoginPage","history","useHistory","setClientNameOnClick","setName","temporaryName","fn","header","nameField","setTemporaryName","length","push","nameButton","buttonText","disabled","MessengerApp","exact","path","render","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.24160afd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import io from 'socket.io-client'\nimport {MessageType, UserType} from \"../Components/Chat/Chat\";\n\nexport const api = {\n    socket: null as null | SocketIOClient.Socket,\n\n    createConnection() {\n        // this.socket = io('http://localhost:3009');\n        this.socket = io('https://sin-messenger.herokuapp.com/');\n    },\n    subscribe(initMessagesHandler: (messages: Array<MessageType>, fn: () => void) => void,\n              newMessageSentHandler: (message: MessageType) => void,\n              userTypingHandler: (user: UserType) => void\n    ) {\n        this.socket?.on('init-messages-published', initMessagesHandler);\n        this.socket?.on('new-message-sent', newMessageSentHandler);\n        this.socket?.on('user-typing', userTypingHandler);\n    },\n    destroyConnection() {\n        this.socket?.disconnect();\n        this.socket = null\n    },\n    sendName(name: string) {\n        this.socket?.emit('client-name-sent', name, (error: string | null) => {\n            console.log(error);\n            if (error) alert(error);\n        })\n    },\n    sendMessage(message: string) {\n        this.socket?.emit('client-message-sent', message, (error: string | null) => {\n            if (error) alert(error);\n        })\n    },\n    typeMessage() {\n        this.socket?.emit('client-typed');\n    }\n};\n","import { Dispatch } from 'redux';\nimport { ThunkAction } from 'redux-thunk';\nimport {api} from '../api/api'\nimport { MessageType, UserType } from '../Components/Chat/Chat';\nimport {AppStateType, InferActionTypes } from './store';\n\nconst initialState = {\n    messages: [] as Array <MessageType>,\n    typingUsers: [] as Array <UserType>\n};\n\nexport const chatReducer = (state: InitialStateType = initialState, action: ActionTypes) : InitialStateType => {\n    switch (action.type) {\n        case 'messages-received': {\n            return {...state, messages: action.messages}\n        }\n        case 'new-message-received': {\n            return {...state,\n                messages: [...state.messages, action.message],\n                typingUsers: state.typingUsers.filter(u => u.id !== action.message.user.id)\n            }\n        }\n        case 'typingUserAdded': {\n            return {...state, typingUsers: [...state.typingUsers.filter(u => u.id !== action.user.id), action.user]}\n        }\n        default:\n            return state\n    }\n};\n\n\nconst action = {\n    messagesReceived: (messages: Array<MessageType>) => ({\n        type: 'messages-received',\n        messages\n    }as const),\n    newMessageReceived: (message: MessageType) => ({\n        type: 'new-message-received',\n        message\n    }as const),\n    typingUserAdded: (user: UserType) => ({\n        type: 'typingUserAdded',\n        user\n    }as const)\n};\n\nexport const createConnection = () => (dispatch: Dispatch) => {\n    api.createConnection();\n    api.subscribe((messages: Array<MessageType>, fn: (data: string) => void) => {\n            dispatch(action.messagesReceived(messages));\n            fn(\"data from front\");\n        },\n        (message: MessageType) => {\n            dispatch(action.newMessageReceived(message))\n        },\n        (user: UserType) => {\n            dispatch(action.typingUserAdded(user))\n        })\n};\n\n\nexport const setClientName = (name: string): ThunkType => (dispatch: Dispatch) => {\n    api.sendName(name);\n};\n\nexport const typeMessage = (): ThunkType => (dispatch: Dispatch) => {\n    api.typeMessage();\n};\nexport const sendMessage = (messages: string): ThunkType => (dispatch: Dispatch) => {\n    api.sendMessage(messages);\n};\n\nexport const destroyConnection = (): ThunkType => (dispatch: Dispatch) => {\n    api.destroyConnection()\n};\n\n\n//Types\ntype ActionTypes = InferActionTypes<typeof action>\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionTypes>\ntype InitialStateType = typeof initialState\n\n\n\n\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {chatReducer} from \"./chat-reducer\";\nimport thunk from \"redux-thunk\";\n\n\nlet rootReducer = combineReducers({\n    chat: chatReducer\n});\n\n// let composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE___;\nexport let store = createStore(rootReducer, applyMiddleware(thunk));\n\n//@ts-ignore\nwindow.store = store;\n\nexport type AppStateType = ReturnType<typeof rootReducer>\nexport type InferActionTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never","import {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../redux/store\";\nimport React, {ChangeEvent, KeyboardEvent, useEffect, useRef, useState} from \"react\";\nimport {destroyConnection, sendMessage, typeMessage} from \"../../redux/chat-reducer\";\nimport styles from '../../../src/Components/Chat/Chat.module.css'\nimport Button from \"@material-ui/core/Button/Button\";\nimport TextField from \"@material-ui/core/TextField/TextField\";\nimport Avatar from \"@material-ui/core/Avatar/Avatar\";\nimport {Redirect} from \"react-router-dom\";\n\ntype Props = {\n    name: string\n}\n\nexport type MessageType = {\n    message: string,\n    id: number\n    user: UserType\n}\n\nexport type UserType = {\n    id: string,\n    name: string\n}\n\n\nexport const Chat = (props: Props) => {\n    const messages = useSelector((state: AppStateType) => state.chat.messages);\n    const typingUsers = useSelector((state: AppStateType) => state.chat.typingUsers);\n    const dispatch = useDispatch();\n\n\n    const [message, setMessage] = useState('');\n    const [isAutoScrollActive, setIsAutoScrollActive] = useState(true);\n    const [lastScrollTop, setLastScrollTop] = useState(0);\n\n    useEffect(() => {\n        if (isAutoScrollActive) {\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\n        }\n    }, [messages, typingUsers]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(destroyConnection())\n        }\n    }, []);\n\n    const messagesAnchorRef = useRef<HTMLDivElement>(null);\n\n    const scrollMessages = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n        let element = e.currentTarget;\n        const maxScrollPosition = element.scrollHeight - element.clientHeight;\n        if (element.scrollTop > lastScrollTop && Math.abs(maxScrollPosition - element.scrollTop) < 2) {\n            setIsAutoScrollActive(true)\n        } else {\n            setIsAutoScrollActive(false)\n        }\n        setLastScrollTop(element.scrollTop)\n    };\n\n    const sendMessageFunc = () => {\n        dispatch(sendMessage(message));\n        setMessage('')\n    };\n\n    const messageElements = messages.map((m: MessageType) => {\n        return <div key={m.id}>\n            <Avatar>\n            </Avatar>\n            <b>{m.user.name}: </b>\n            {m.message}\n            <hr/>\n        </div>\n    });\n\n    const typingUsersElement = typingUsers.map((m: UserType) => {\n        return <div key={m.id}>\n            <b>{m.name}:</b> ...\n        </div>\n    });\n\n    const typeMessageFunc = (target: KeyboardEvent<HTMLDivElement>) => {\n        if (target.key === 'Enter') {\n            dispatch(sendMessage(message));\n            setMessage('');\n\n        }\n    };\n\n    const onChangeTyping = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        setMessage(e.currentTarget.value);\n        dispatch(typeMessage())\n    };\n\n\n    if (props.name === 'anonymous') {\n        return <Redirect to={`/login`}/>\n    }\n\n    return (\n\n        <div>\n            <div className={styles.chatWindow}\n                 onScroll={scrollMessages}>\n                {messageElements}\n                {typingUsersElement}\n                <div\n                    ref={messagesAnchorRef}>\n                </div>\n            </div>\n            <div className={styles.messageField}>\n                <TextField id='outlined-basic'\n                           label='Enter your message...'\n                           value={message}\n                           onKeyPress={typeMessageFunc}\n                           onChange={onChangeTyping}/>\n            </div>\n            <div className={styles.messageButton}>\n                <Button size='medium'\n                        variant='outlined'\n                        color='primary'\n                        onClick={sendMessageFunc}>\n                    Send message\n                </Button>\n            </div>\n        </div>\n    )\n};\n\n","import React, {useEffect, KeyboardEvent} from \"react\";\nimport styles from \"../LoginPage/LoginPage.module.css\";\nimport TextField from \"@material-ui/core/TextField/TextField\";\nimport Button from \"@material-ui/core/Button/Button\";\nimport {createConnection, setClientName} from \"../../redux/chat-reducer\";\nimport {useDispatch} from \"react-redux\";\nimport {NavLink, useHistory} from \"react-router-dom\";\n\ntype Props = {\n    temporaryName: string,\n    name: string\n    setName: (name: string) => void,\n    setTemporaryName: (name: string) => void\n}\n\nexport const LoginPage = (props: Props) => {\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    const setClientNameOnKeyPress = (target: KeyboardEvent<HTMLDivElement>) => {\n        if (target.key === 'Enter' && props.temporaryName.length > 0) {\n            setClientNameOnClick();\n            history.push('/chat')\n        }\n    };\n\n    const setClientNameOnClick = () => {\n        props.setName(props.temporaryName);\n        dispatch(setClientName(props.temporaryName));\n    };\n\n    useEffect(() => {\n        dispatch(createConnection());\n    }, []);\n\n    return (\n        <div>\n            <h1 className={styles.header}>Welcome to chat</h1>\n            <div className={styles.nameField}>\n                <TextField id='outlined-basic'\n                           label='Enter your name'\n                           onChange={(e) => props.setTemporaryName(e.currentTarget.value)}\n                           onKeyPress={setClientNameOnKeyPress}/>\n            </div>\n            <div className={styles.nameButton}>\n                <NavLink className={styles.buttonText} to={props.temporaryName.length < 1 ? '/login' : '/chat'}>\n                    <Button className={styles.buttonText}\n                            size='medium'\n                            variant='outlined'\n                            color='primary'\n                            disabled={props.temporaryName.length < 1}\n                            onClick={setClientNameOnClick}>\n                        Enter to chat\n                    </Button>\n                </NavLink>\n            </div>\n        </div>\n    )\n};","import React, {useState} from 'react'\nimport {Redirect, Route, Switch} from 'react-router-dom';\nimport './App.css'\nimport {Chat} from \"./Components/Chat/Chat\";\nimport {LoginPage} from \"./Components/LoginPage/LoginPage\";\n\n\nexport const MessengerApp = () => {\n\n    const [temporaryName, setTemporaryName] = useState('');\n    const [name, setName] = useState('anonymous');\n\n    return (\n        <div className=\"App\">\n            <Switch>\n                <Route exact path='/' render={() => <Redirect to={`/login`}/>}/>\n                <Route path='/login' render={() => <LoginPage temporaryName={temporaryName} setTemporaryName={setTemporaryName} name={name} setName={setName} />}/>\n                <Route path='/chat' render={() => <Chat name={name}/>}/>\n            </Switch>\n        </div>\n    )\n};\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\nimport {Provider} from 'react-redux'\nimport {store} from './redux/store'\nimport {MessengerApp} from \"./MessengerApp\";\nimport {HashRouter} from \"react-router-dom\";\n\n\nReactDOM.render(\n    <HashRouter>\n        <React.StrictMode>\n            <Provider store={store}>\n                <MessengerApp/>\n            </Provider>\n        </React.StrictMode>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nameField\":\"LoginPage_nameField__2TzQ3\",\"nameButton\":\"LoginPage_nameButton__1lNK0\",\"buttonText\":\"LoginPage_buttonText__1FdEM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatWindow\":\"Chat_chatWindow__35nOg\",\"messageField\":\"Chat_messageField__2XZhh\",\"messageButton\":\"Chat_messageButton__14qt4\",\"header\":\"Chat_header__eIfgM\"};"],"sourceRoot":""}